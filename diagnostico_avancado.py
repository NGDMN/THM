#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de diagn√≥stico avan√ßado para debugging das APIs
"""

import os
import sys
import psycopg2
from datetime import datetime, date, timedelta
import json
from decimal import Decimal
from dotenv import load_dotenv

# Carregar vari√°veis do .env
load_dotenv()

# Configura√ß√£o do banco usando .env
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'database': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'port': os.getenv('DB_PORT'),
    'sslmode': 'require'
}

def conectar_db():
    """Conecta ao banco de dados"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        return conn
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        return None

def debug_previsao_api():
    """Debug da API de previs√£o"""
    print("\nüîç DEBUG: API de Previs√£o")
    print("=" * 50)
    
    conn = conectar_db()
    if not conn:
        return
    
    cursor = conn.cursor()
    
    # Teste 1: Verificar dados dispon√≠veis
    print("üìä Dados dispon√≠veis na tabela previsoes:")
    cursor.execute("""
        SELECT DISTINCT cidade, estado, COUNT(*) as total
        FROM previsoes 
        WHERE data >= CURRENT_DATE
        GROUP BY cidade, estado
        ORDER BY total DESC
        LIMIT 10
    """)
    
    resultados = cursor.fetchall()
    for cidade, estado, total in resultados:
        print(f"   - {cidade}, {estado}: {total} registros")
    
    # Teste 2: Simular chamadas da API
    print("\nüß™ Simulando chamadas da API:")
    
    test_cases = [
        {"cidade": "Rio de Janeiro", "estado": "RJ"},
        {"cidade": "Angra dos Reis", "estado": "RJ"},
        {"cidade": "S√£o Paulo", "estado": "SP"},
        {"cidade": "rio de janeiro", "estado": "rj"},  # Teste case-insensitive
    ]
    
    for caso in test_cases:
        print(f"\n   üîç Testando: {caso['cidade']}, {caso['estado']}")
        
        # Query exata como na API
        query = """
            SELECT p.*, 
                   COALESCE(a.total_afetados, 0) as historico_afetados
            FROM previsoes p
            LEFT JOIN (
                SELECT municipio, estado, SUM(dh_afetados) as total_afetados
                FROM alagamentos 
                WHERE municipio ILIKE %s AND estado ILIKE %s
                GROUP BY municipio, estado
            ) a ON LOWER(p.cidade) = LOWER(a.municipio) AND LOWER(p.estado) = LOWER(a.estado)
            WHERE LOWER(p.cidade) = LOWER(%s) 
            AND LOWER(p.estado) = LOWER(%s)
            AND p.data >= %s
            ORDER BY p.data
        """
        
        params = (
            caso['cidade'], caso['estado'],
            caso['cidade'], caso['estado'],
            date.today()
        )
        
        cursor.execute(query, params)
        resultados = cursor.fetchall()
        
        print(f"      üìà Resultados: {len(resultados)} registros")
        if resultados:
            for i, row in enumerate(resultados[:3]):  # Mostrar apenas os 3 primeiros
                print(f"         {i+1}. Data: {row[3]}, Precipita√ß√£o: {row[6]}mm")
    
    cursor.close()
    conn.close()

def debug_historico_api():
    """Debug da API de hist√≥rico"""
    print("\nüîç DEBUG: API de Hist√≥rico")
    print("=" * 50)
    
    conn = conectar_db()
    if not conn:
        return
    
    cursor = conn.cursor()
    
    # Verificar dados de chuvas hist√≥ricas
    print("üìä Dados de chuvas hist√≥ricas dispon√≠veis:")
    cursor.execute("""
        SELECT DISTINCT municipio, estado, COUNT(*) as total,
               MIN(data) as data_inicio, MAX(data) as data_fim
        FROM chuvas_diarias 
        GROUP BY municipio, estado
        ORDER BY total DESC
        LIMIT 10
    """)
    
    resultados = cursor.fetchall()
    for municipio, estado, total, inicio, fim in resultados:
        print(f"   - {municipio}, {estado}: {total} registros ({inicio} a {fim})")
    
    # Verificar dados de alagamentos
    print("\nüìä Dados de alagamentos dispon√≠veis:")
    cursor.execute("""
        SELECT DISTINCT municipio, estado, COUNT(*) as total,
               MIN(data) as data_inicio, MAX(data) as data_fim
        FROM alagamentos 
        GROUP BY municipio, estado
        ORDER BY total DESC
    """)
    
    resultados = cursor.fetchall()
    for municipio, estado, total, inicio, fim in resultados:
        print(f"   - {municipio}, {estado}: {total} registros ({inicio} a {fim})")
    
    # Teste de queries do hist√≥rico
    print("\nüß™ Testando queries de hist√≥rico:")
    
    test_cases = [
        {"cidade": "Rio de Janeiro", "estado": "RJ"},
        {"cidade": "ANGRA DOS REIS", "estado": "RJ"},
        {"cidade": "angra dos reis", "estado": "rj"},
    ]
    
    for caso in test_cases:
        print(f"\n   üîç Testando: {caso['cidade']}, {caso['estado']}")
        
        # Query de chuvas
        cursor.execute("""
            SELECT data, precipitacao_diaria 
            FROM chuvas_diarias 
            WHERE LOWER(municipio) = LOWER(%s) 
            AND LOWER(estado) = LOWER(%s)
            ORDER BY data DESC 
            LIMIT 30
        """, (caso['cidade'], caso['estado']))
        
        chuvas = cursor.fetchall()
        print(f"      üåßÔ∏è  Chuvas: {len(chuvas)} registros")
        
        # Query de alagamentos
        cursor.execute("""
            SELECT data, local, dh_afetados 
            FROM alagamentos 
            WHERE LOWER(municipio) = LOWER(%s) 
            AND LOWER(estado) = LOWER(%s)
            ORDER BY data DESC
        """, (caso['cidade'], caso['estado']))
        
        alagamentos = cursor.fetchall()
        print(f"      üåä Alagamentos: {len(alagamentos)} registros")
    
    cursor.close()
    conn.close()

def verificar_problemas_encoding():
    """Verifica problemas de encoding nos nomes das cidades"""
    print("\nüîç DEBUG: Problemas de Encoding")
    print("=" * 50)
    
    conn = conectar_db()
    if not conn:
        return
    
    cursor = conn.cursor()
    
    # Verificar caracteres especiais
    print("üî§ Cidades com caracteres especiais:")
    cursor.execute("""
        SELECT DISTINCT cidade, estado 
        FROM previsoes 
        WHERE cidade ~ '[^A-Za-z0-9 ]'
        ORDER BY cidade
        LIMIT 10
    """)
    
    resultados = cursor.fetchall()
    for cidade, estado in resultados:
        print(f"   - '{cidade}', {estado} (bytes: {repr(cidade.encode())})")
    
    cursor.close()
    conn.close()

def gerar_dados_teste():
    """Gera dados de teste para debugging"""
    print("\nüîß Gerando dados de teste...")
    
    conn = conectar_db()
    if not conn:
        return
    
    cursor = conn.cursor()
    
    try:
        # Inserir dados de teste para S√£o Paulo
        print("üìù Inserindo dados de teste para S√£o Paulo:")
        
        hoje = date.today()
        for i in range(5):
            data_previsao = hoje + timedelta(days=i)
            cursor.execute("""
                INSERT INTO previsoes 
                (cidade, estado, data, precipitacao, probabilidade_alagamento, nivel_risco, afetados_estimados)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (cidade, estado, data) DO UPDATE SET
                precipitacao = EXCLUDED.precipitacao,
                updated_at = CURRENT_TIMESTAMP
            """, ('S√£o Paulo', 'SP', data_previsao, 10.5 + i*2, 15.0, 'medio', 50))
        
        # Inserir dados hist√≥ricos de chuva para S√£o Paulo
        for i in range(30):
            data_chuva = hoje - timedelta(days=i+1)
            cursor.execute("""
                INSERT INTO chuvas_diarias 
                (municipio, estado, data, precipitacao_diaria)
                VALUES (%s, %s, %s, %s)
                ON CONFLICT (municipio, estado, data) DO UPDATE SET
                precipitacao_diaria = EXCLUDED.precipitacao_diaria,
                updated_at = CURRENT_TIMESTAMP
            """, ('S√£o Paulo', 'SP', data_chuva, 5.5 + i*0.5))
        
        # Inserir alagamento de teste
        cursor.execute("""
            INSERT INTO alagamentos 
            (municipio, estado, data, local, dh_afetados)
            VALUES (%s, %s, %s, %s, %s)
            ON CONFLICT (municipio, estado, data, local) DO UPDATE SET
            dh_afetados = EXCLUDED.dh_afetados,
            updated_at = CURRENT_TIMESTAMP
        """, ('S√£o Paulo', 'SP', hoje - timedelta(days=10), 'Centro', 100))
        
        conn.commit()
        print("‚úÖ Dados de teste inseridos com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro ao inserir dados de teste: {e}")
        conn.rollback()
    
    cursor.close()
    conn.close()

def main():
    """Fun√ß√£o principal"""
    print("ü©∫ DIAGN√ìSTICO AVAN√áADO DAS APIS")
    print("=" * 50)
    
    # Verificar vari√°veis de ambiente
    print("üîß Verificando vari√°veis de ambiente:")
    for key in ['DB_HOST', 'DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_PORT']:
        value = os.getenv(key)
        if key == 'DB_PASSWORD':
            print(f"   {key}: {'***' if value else 'N√ÉO ENCONTRADO'}")
        else:
            print(f"   {key}: {value if value else 'N√ÉO ENCONTRADO'}")
    
    if not all([os.getenv(key) for key in ['DB_HOST', 'DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_PORT']]):
        print("‚ùå Algumas vari√°veis de ambiente n√£o foram encontradas!")
        print("Certifique-se de que o arquivo .env est√° no diret√≥rio correto.")
        return
    
    # Verificar conex√£o
    conn = conectar_db()
    if not conn:
        print("‚ùå N√£o foi poss√≠vel conectar ao banco de dados!")
        return
    conn.close()
    
    print("‚úÖ Conex√£o com banco de dados OK!")
    
    # Executar diagn√≥sticos
    debug_previsao_api()
    debug_historico_api()
    verificar_problemas_encoding()
    
    # Perguntar se deve gerar dados de teste
    resposta = input("\n‚ùì Deseja gerar dados de teste para S√£o Paulo? (s/n): ").lower()
    if resposta == 's':
        gerar_dados_teste()
    
    print("\n‚úÖ Diagn√≥stico conclu√≠do!")
    print("\nüìã PR√ìXIMOS PASSOS:")
    print("1. Analise os resultados acima")
    print("2. Verifique se h√° problemas de case-sensitivity")
    print("3. Confirme se os par√¢metros est√£o sendo enviados corretamente do frontend")
    print("4. Se necess√°rio, execute novamente ap√≥s gerar dados de teste")

if __name__ == "__main__":
    main() 