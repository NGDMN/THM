# app.py - Aplica√ß√£o Flask Refatorada (mantendo funcionalidades existentes)
import os
import sys
import logging
import atexit
from datetime import datetime, timedelta
from flask import Flask, jsonify, request, g, current_app
from flask_cors import CORS
from werkzeug.exceptions import HTTPException
import psycopg2
from psycopg2.extras import RealDictCursor
import pandas as pd
import requests
from apscheduler.schedulers.background import BackgroundScheduler
from functools import wraps
import time
import json

# Configurar path do Python (mant√©m compatibilidade)
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Importa configura√ß√µes personalizadas
from config import config

# Cache simples em mem√≥ria
app_cache = {}

def create_app(config_override=None):
    """
    Application Factory Pattern - Cria e configura a aplica√ß√£o Flask
    
    Args:
        config_override: Configura√ß√µes personalizadas para testes
    
    Returns:
        Flask: Inst√¢ncia configurada da aplica√ß√£o
    """
    app = Flask(__name__)
    
    # Aplicar configura√ß√µes
    configure_app(app, config_override)
    
    # Configurar extens√µes
    configure_extensions(app)
    
    # Registrar blueprints
    register_blueprints(app)
    
    # Configurar handlers de erro
    configure_error_handlers(app)
    
    # Configurar logging
    configure_logging(app)
    
    # Configurar hooks de request/response
    configure_hooks(app)
    
    # Configurar scheduler (tarefas autom√°ticas)
    configure_scheduler(app)
    
    return app

def configure_app(app, config_override=None):
    """Configura as defini√ß√µes da aplica√ß√£o usando novo sistema de config"""
    
    # Configura√ß√µes b√°sicas do Flask
    app.config['SECRET_KEY'] = config.app.SECRET_KEY
    app.config['DEBUG'] = config.app.DEBUG
    
    # Configura√ß√µes de banco (mant√©m compatibilidade)
    app.config['DATABASE_URL'] = config.database.DB_URL
    app.config['DB_CONFIG'] = {
        'host': config.database.DB_HOST,
        'port': config.database.DB_PORT,
        'database': config.database.DB_NAME,
        'user': config.database.DB_USER,
        'password': config.database.DB_PASSWORD
    }
    
    # Configura√ß√µes da API do tempo
    app.config['OPENWEATHER_API_KEY'] = config.api.OPENWEATHER_API_KEY
    app.config['OPENWEATHER_BASE_URL'] = config.api.OPENWEATHER_BASE_URL
    app.config['REQUEST_TIMEOUT'] = config.api.REQUEST_TIMEOUT
    app.config['MAX_RETRIES'] = config.api.MAX_RETRIES
    
    # Configura√ß√µes de cache
    app.config['CACHE_TTL'] = config.cache.CACHE_TTL
    app.config['CACHE_SIZE'] = config.cache.CACHE_SIZE
    app.config['ENABLE_CACHE'] = config.cache.ENABLE_CACHE
    
    # Configura√ß√µes meteorol√≥gicas
    app.config['WEATHER_UPDATE_INTERVAL'] = config.weather.UPDATE_INTERVAL
    app.config['ALERT_TEMPERATURE_MIN'] = config.weather.ALERT_TEMPERATURE_MIN
    app.config['ALERT_TEMPERATURE_MAX'] = config.weather.ALERT_TEMPERATURE_MAX
    app.config['ALERT_HUMIDITY_MIN'] = config.weather.ALERT_HUMIDITY_MIN
    app.config['ALERT_HUMIDITY_MAX'] = config.weather.ALERT_HUMIDITY_MAX
    
    # Estados e cidades
    app.config['ESTADOS_SUPORTADOS'] = config.app.ESTADOS_SUPORTADOS
    app.config['CIDADES_PRINCIPAIS'] = config.app.CIDADES_PRINCIPAIS
    
    # Configura√ß√µes espec√≠ficas do projeto (mant√©m compatibilidade)
    app.config['PORT'] = int(os.environ.get('PORT', 5000))
    
    # Aplicar configura√ß√µes customizadas (para testes)
    if config_override:
        app.config.update(config_override)

def configure_extensions(app):
    """Configura extens√µes do Flask"""
    
    # CORS - permite requisi√ß√µes cross-origin (mant√©m configura√ß√£o atual)
    CORS(app)

def register_blueprints(app):
    """Registra blueprints da aplica√ß√£o"""
    
    # Blueprints existentes (mant√©m compatibilidade)
    try:
        from api.routes.previsao_routes import previsao_bp
        app.register_blueprint(previsao_bp)
        app.logger.info("‚úÖ Blueprint previsao registrado")
    except ImportError as e:
        app.logger.warning(f"‚ö†Ô∏è Blueprint previsao n√£o encontrado: {e}")
    
    try:
        from api.routes.historico import historico_bp
        app.register_blueprint(historico_bp)
        app.logger.info("‚úÖ Blueprint historico registrado")
    except ImportError as e:
        app.logger.warning(f"‚ö†Ô∏è Blueprint historico n√£o encontrado: {e}")
    
    # Registra rotas principais diretamente no app (mant√©m funcionalidades existentes)
    register_main_routes(app)

def register_main_routes(app):
    """Registra rotas principais mantendo funcionalidades existentes"""
    
    @app.route('/')
    def index():
        """Rota principal - status da API (vers√£o melhorada)"""
        return jsonify({
            'status': 'online',
            'app': 'API do Sistema de Previs√£o de Alagamentos RJ/SP',
            'version': '2.0.0',
            'timestamp': datetime.utcnow().isoformat(),
            'endpoints': [
                '/previsao/clima',
                '/previsao/chuvas',
                '/previsao/alagamentos', 
                '/previsao/alertas',
                '/historico/chuvas',
                '/historico/alagamentos',
                '/test-db',
                '/municipios',
                '/health',
                '/config/info',
                '/cache/stats'
            ],
            'config': {
                'debug': app.config['DEBUG'],
                'cache_enabled': app.config['ENABLE_CACHE'],
                'states_supported': len(app.config['ESTADOS_SUPORTADOS']),
                'api_ready': bool(app.config['OPENWEATHER_API_KEY']),
                'database_configured': bool(app.config['DB_CONFIG'])
            }
        })
    
    @app.route('/health')
    def health_check():
        """Health check melhorado"""
        try:
            # Testa conex√£o com banco
            db_status = test_database()
            
            # Testa API OpenWeather
            weather_api_status = test_openweather_api()
            
            # Testa configura√ß√µes
            config_status = validate_configuration()
            
            all_ok = db_status and weather_api_status and config_status
            status = 'healthy' if all_ok else 'unhealthy'
            status_code = 200 if all_ok else 503
            
            return jsonify({
                'status': status,
                'timestamp': datetime.utcnow().isoformat(),
                'checks': {
                    'database': 'ok' if db_status else 'error',
                    'weather_api': 'ok' if weather_api_status else 'error',
                    'configuration': 'ok' if config_status else 'error',
                    'cache': 'enabled' if app.config['ENABLE_CACHE'] else 'disabled'
                },
                'version': '2.0.0'
            }), status_code
            
        except Exception as e:
            app.logger.error(f"Health check failed: {e}")
            return jsonify({
                'status': 'unhealthy',
                'error': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }), 503
    
    @app.route('/test-db', methods=['GET'])
    def test_db_endpoint():
        """Endpoint para testar conex√£o PostgreSQL (mant√©m funcionalidade)"""
        app.logger.info("üß™ Testando conex√£o PostgreSQL via endpoint...")
        success = test_database()
        
        return jsonify({
            'success': success,
            'message': 'Conex√£o testada - verifique logs do servidor',
            'database_config': {
                'host': app.config['DB_CONFIG']['host'],
                'database': app.config['DB_CONFIG']['database'],
                'user': app.config['DB_CONFIG']['user'],
                'port': app.config['DB_CONFIG']['port']
            },
            'timestamp': datetime.utcnow().isoformat()
        })
    
    @app.route('/municipios', methods=['GET'])
    def listar_municipios():
        """Lista munic√≠pios com fallback para PostgreSQL (mant√©m l√≥gica)"""
        app.logger.info("üèôÔ∏è Buscando munic√≠pios...")
        
        try:
            # Tentar primeiro do CSV (atual)
            app.logger.info("üìÅ Tentando carregar do CSV...")
            
            # Busca CSV em diferentes locais poss√≠veis
            csv_paths = [
                'data/municipios_RJ_SP_coords.csv',
                'api/data/municipios_RJ_SP_coords.csv',
                'data/raw/MunicipiosCoordenada.csv',
                'api/data/raw/MunicipiosCoordenada.csv'
            ]
            
            df = None
            for csv_path in csv_paths:
                if os.path.exists(csv_path):
                    df = pd.read_csv(csv_path)
                    app.logger.info(f"‚úÖ CSV encontrado em: {csv_path}")
                    break
            
            if df is not None:
                municipios = []
                for _, row in df.iterrows():
                    # Adapta para diferentes formatos de CSV
                    municipio_data = {
                        'nome': row.get('municipio', row.get('nome', row.get('cidade', ''))),
                        'uf': row.get('estado', row.get('uf', row.get('sigla_uf', '')))
                    }
                    if municipio_data['nome'] and municipio_data['uf']:
                        municipios.append(municipio_data)
                
                app.logger.info(f"‚úÖ CSV carregado: {len(municipios)} munic√≠pios")
                return jsonify(municipios)
            
        except Exception as csv_error:
            app.logger.warning(f"‚ö†Ô∏è Erro ao carregar CSV: {csv_error}")
        
        # Fallback para PostgreSQL
        app.logger.info("üêò Tentando carregar do PostgreSQL...")
        conn = get_db_connection()
        if not conn:
            return jsonify({'erro': 'Erro de conex√£o com banco de dados'}), 500
        
        try:
            with conn.cursor(cursor_factory=RealDictCursor) as cursor:
                cursor.execute("""
                    SELECT DISTINCT municipio as nome, estado as uf 
                    FROM municipios 
                    WHERE estado IN ('RJ', 'SP')
                    ORDER BY estado, municipio;
                """)
                municipios_db = cursor.fetchall()
                
                municipios = [dict(m) for m in municipios_db]
                app.logger.info(f"‚úÖ PostgreSQL carregado: {len(municipios)} munic√≠pios")
                
                conn.close()
                return jsonify(municipios)
                
        except Exception as db_error:
            app.logger.error(f"‚ùå Erro ao carregar do PostgreSQL: {db_error}")
            conn.close()
            return jsonify({'erro': f'Erro ao carregar munic√≠pios: {str(db_error)}'}), 500
    
    # Endpoints de debug e admin (mant√©m funcionalidades)
    
    @app.route('/admin/atualizar-previsoes', methods=['POST', 'GET'])
    def admin_atualizar_previsoes():
        """For√ßa atualiza√ß√£o de previs√µes"""
        try:
            from api.services.openweather_service import OpenWeatherService
            resultado = OpenWeatherService.atualizar_previsoes_todas_cidades()
            return jsonify({
                'status': 'ok',
                'mensagem': 'Previs√µes atualizadas com sucesso!',
                'resultado': resultado,
                'timestamp': datetime.utcnow().isoformat()
            }), 200
        except Exception as e:
            app.logger.error(f"‚ùå Erro ao atualizar previs√µes: {e}")
            return jsonify({
                'status': 'erro',
                'mensagem': str(e),
                'timestamp': datetime.utcnow().isoformat()
            }), 500
    
    @app.route('/debug/historico', methods=['GET'])
    def debug_historico():
        """Debug endpoint para verificar dados hist√≥ricos"""
        conn = get_db_connection()
        if not conn:
            return jsonify({'erro': 'Erro de conex√£o'}), 500
        
        try:
            with conn.cursor(cursor_factory=RealDictCursor) as cursor:
                # Contar registros
                cursor.execute("SELECT COUNT(*) as total FROM historico_chuvas;")
                chuvas_total = cursor.fetchone()['total']
                
                cursor.execute("SELECT COUNT(*) as total FROM historico_alagamentos;")
                alagamentos_total = cursor.fetchone()['total']
                
                # Top 5 munic√≠pios com mais registros de chuva
                cursor.execute("""
                    SELECT municipio, estado, COUNT(*) as total
                    FROM historico_chuvas
                    GROUP BY municipio, estado
                    ORDER BY total DESC
                    LIMIT 5;
                """)
                chuvas_por_municipio = cursor.fetchall()
                
                # √öltimos registros de alagamentos
                cursor.execute("""
                    SELECT *
                    FROM historico_alagamentos
                    ORDER BY data DESC
                    LIMIT 5;
                """)
                ultimos_alagamentos = cursor.fetchall()
                
            conn.close()
            return jsonify({
                'chuvas_total': chuvas_total,
                'alagamentos_total': alagamentos_total,
                'chuvas_por_municipio': [dict(r) for r in chuvas_por_municipio],
                'ultimos_alagamentos': [dict(r) for r in ultimos_alagamentos],
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            app.logger.error(f"‚ùå Erro no debug hist√≥rico: {e}")
            conn.close()
            return jsonify({'erro': str(e)}), 500
    
    @app.route('/debug/tabelas', methods=['GET'])
    def debug_tabelas():
        """Verificar estrutura das tabelas"""
        conn = get_db_connection()
        if not conn:
            return jsonify({'erro': 'Erro de conex√£o'}), 500
        
        try:
            with conn.cursor(cursor_factory=RealDictCursor) as cursor:
                result = {}
                
                # Verificar se tabelas existem
                cursor.execute("""
                    SELECT table_name, column_name, data_type 
                    FROM information_schema.columns 
                    WHERE table_schema = 'public' 
                    AND table_name IN ('historico_chuvas', 'historico_alagamentos', 'municipios')
                    ORDER BY table_name, ordinal_position;
                """)
                
                colunas = cursor.fetchall()
                for linha in colunas:
                    tabela = linha['table_name']
                    if tabela not in result:
                        result[tabela] = {'colunas': [], 'existe': True}
                    result[tabela]['colunas'].append({
                        'nome': linha['column_name'],
                        'tipo': linha['data_type']
                    })
                
                # Verificar dados de exemplo
                for tabela in ['historico_chuvas', 'historico_alagamentos', 'municipios']:
                    if tabela in result:
                        cursor.execute(f"SELECT * FROM {tabela} LIMIT 3;")
                        result[tabela]['exemplos'] = [dict(r) for r in cursor.fetchall()]
            
            conn.close()
            return jsonify(result)
            
        except Exception as e:
            app.logger.error(f"‚ùå Erro no debug tabelas: {e}")
            conn.close()
            return jsonify({'erro': str(e)}), 500
    
    @app.route('/admin/popular-dados-teste', methods=['POST'])
    def popular_dados_teste():
        """Popular banco com dados de teste"""
        conn = get_db_connection()
        if not conn:
            return jsonify({'erro': 'Erro de conex√£o'}), 500
        
        try:
            with conn.cursor() as cursor:
                # Inserir dados de teste - Munic√≠pios
                cursor.execute("""
                    INSERT INTO municipios (municipio, estado, latitude, longitude) 
                    VALUES 
                        ('Rio de Janeiro', 'RJ', -22.9068, -43.1729),
                        ('S√£o Paulo', 'SP', -23.5505, -46.6333),
                        ('Angra dos Reis', 'RJ', -23.0067, -44.3182),
                        ('Campinas', 'SP', -22.9099, -47.0626),
                        ('Niter√≥i', 'RJ', -22.8838, -43.1032)
                    ON CONFLICT DO NOTHING;
                """)
                
                # Inserir dados de teste - Chuvas
                cursor.execute("""
                    INSERT INTO historico_chuvas (municipio, estado, data, precipitacao, intensidade)
                    VALUES 
                        ('Rio de Janeiro', 'RJ', '2024-01-15', 25.5, 'Moderada'),
                        ('S√£o Paulo', 'SP', '2024-01-16', 45.2, 'Forte'),
                        ('Angra dos Reis', 'RJ', '2024-01-17', 15.8, 'Fraca'),
                        ('Campinas', 'SP', '2024-01-18', 32.1, 'Moderada'),
                        ('Niter√≥i', 'RJ', '2024-01-19', 8.4, 'Fraca')
                    ON CONFLICT DO NOTHING;
                """)
                
                # Inserir dados de teste - Alagamentos
                cursor.execute("""
                    INSERT INTO historico_alagamentos (municipio, estado, data, nivel, localizacao)
                    VALUES 
                        ('Rio de Janeiro', 'RJ', '2024-01-15', 'M√©dio', 'Centro'),
                        ('S√£o Paulo', 'SP', '2024-01-16', 'Alto', 'Marginal'),
                        ('Angra dos Reis', 'RJ', '2024-01-17', 'Baixo', 'Porto'),
                        ('Campinas', 'SP', '2024-01-18', 'M√©dio', 'Centro'),
                        ('Niter√≥i', 'RJ', '2024-01-19', 'Baixo', 'Centro')
                    ON CONFLICT DO NOTHING;
                """)
                
                conn.commit()
                
            conn.close()
            return jsonify({
                'status': 'sucesso',
                'mensagem': 'Dados de teste inseridos com sucesso',
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            app.logger.error(f"‚ùå Erro ao popular dados: {e}")
            conn.close()
            return jsonify({'erro': str(e)}), 500
    
    @app.route('/debug/openweather', methods=['GET'])
    def debug_openweather():
        """Verificar configura√ß√£o OpenWeather"""
        api_key = app.config['OPENWEATHER_API_KEY']
        
        if not api_key:
            return jsonify({
                'erro': 'OPENWEATHER_API_KEY n√£o configurada',
                'configurada': False
            })
        
        # Testar uma requisi√ß√£o simples
        try:
            url = f"http://api.openweathermap.org/data/2.5/weather?q=Rio de Janeiro,BR&appid={api_key}"
            response = requests.get(url, timeout=app.config['REQUEST_TIMEOUT'])
            
            return jsonify({
                'configurada': True,
                'chave_parcial': f"{api_key[:8]}...",
                'teste_api': response.status_code == 200,
                'resposta': response.json() if response.status_code == 200 else response.text,
                'timeout_usado': app.config['REQUEST_TIMEOUT'],
                'timestamp': datetime.utcnow().isoformat()
            })
            
        except Exception as e:
            return jsonify({
                'configurada': True,
                'chave_parcial': f"{api_key[:8]}...",
                'teste_api': False,
                'erro': str(e),
                'timestamp': datetime.utcnow().isoformat()
            })
    
    # Novos endpoints do sistema de configura√ß√£o
    
    @app.route('/config/info')
    def config_info():
        """Informa√ß√µes de configura√ß√£o (sem dados sens√≠veis)"""
        return jsonify({
            'application': {
                'name': 'Sistema de Previs√£o de Alagamentos RJ/SP',
                'version': '2.0.0',
                'debug': app.config['DEBUG']
            },
            'supported_locations': {
                'states': app.config['ESTADOS_SUPORTADOS'],
                'total_states': len(app.config['ESTADOS_SUPORTADOS']),
                'main_cities': {k: v for k, v in list(app.config['CIDADES_PRINCIPAIS'].items())[:3]},
                'total_cities': sum(len(cities) for cities in app.config['CIDADES_PRINCIPAIS'].values())
            },
            'weather_config': {
                'update_interval_minutes': app.config['WEATHER_UPDATE_INTERVAL'] // 60,
                'alert_temperature_range': {
                    'min_celsius': app.config['ALERT_TEMPERATURE_MIN'],
                    'max_celsius': app.config['ALERT_TEMPERATURE_MAX']
                },
                'alert_humidity_range': {
                    'min_percent': app.config['ALERT_HUMIDITY_MIN'],
                    'max_percent': app.config['ALERT_HUMIDITY_MAX']
                }
            },
            'cache_config': {
                'enabled': app.config['ENABLE_CACHE'],
                'ttl_minutes': app.config['CACHE_TTL'] // 60,
                'max_items': app.config['CACHE_SIZE']
            }
        })
    
    @app.route('/cache/stats')
    def cache_stats():
        """Estat√≠sticas do cache"""
        global app_cache
        
        total_items = len(app_cache)
        cache_size_bytes = sum(len(str(v)) for v in app_cache.values()) if app_cache else 0
        
        return jsonify({
            'status': 'enabled' if app.config['ENABLE_CACHE'] else 'disabled',
            'statistics': {
                'total_items': total_items,
                'size_bytes': cache_size_bytes,
                'size_kb': round(cache_size_bytes / 1024, 2),
                'size_mb': round(cache_size_bytes / 1024 / 1024, 2)
            },
            'configuration': {
                'max_items': app.config['CACHE_SIZE'],
                'ttl_seconds': app.config['CACHE_TTL'],
                'ttl_minutes': app.config['CACHE_TTL'] // 60
            },
            'efficiency': {
                'utilization_percent': round((total_items / app.config['CACHE_SIZE']) * 100, 1) if app.config['CACHE_SIZE'] > 0 else 0
            }
        })
    
    @app.route('/cache/clear', methods=['POST'])
    def clear_cache():
        """Limpa o cache"""
        try:
            global app_cache
            cleared_items = len(app_cache)
            app_cache.clear()
            
            app.logger.info(f"Cache limpo manualmente. {cleared_items} itens removidos.")
            
            return jsonify({
                'status': 'success',
                'message': f'Cache limpo com sucesso.',
                'details': {
                    'items_removed': cleared_items,
                    'timestamp': datetime.utcnow().isoformat()
                }
            })
            
        except Exception as e:
            app.logger.error(f"Erro ao limpar cache: {e}")
            return jsonify({
                'status': 'error',
                'message': 'Erro ao limpar o cache',
                'error': str(e)
            }), 500

def configure_error_handlers(app):
    """Configura handlers de erro personalizados"""
    
    @app.errorhandler(404)
    def not_found(error):
        return jsonify({
            'error': 'Endpoint n√£o encontrado',
            'message': 'A rota solicitada n√£o existe',
            'timestamp': datetime.utcnow().isoformat()
        }), 404
    
    @app.errorhandler(500)
    def internal_error(error):
        app.logger.error(f"Erro interno: {error}")
        return jsonify({
            'error': 'Erro interno do servidor',
            'message': 'Ocorreu um erro inesperado',
            'timestamp': datetime.utcnow().isoformat()
        }), 500
    
    @app.errorhandler(Exception)
    def handle_exception(e):
        # Passa HTTPExceptions para o handler padr√£o
        if isinstance(e, HTTPException):
            return e
        
        app.logger.error(f"Erro n√£o tratado: {e}", exc_info=True)
        return jsonify({
            'error': 'Erro interno',
            'message': 'Um erro inesperado ocorreu',
            'timestamp': datetime.utcnow().isoformat()
        }), 500

def configure_logging(app):
    """Configura sistema de logging melhorado"""
    
    # Configura√ß√£o detalhada (mant√©m o formato atual)
    logging.basicConfig(
        level=logging.DEBUG if app.config['DEBUG'] else logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    if not app.debug:
        # Configura√ß√£o para produ√ß√£o
        os.makedirs('logs', exist_ok=True)
        file_handler = logging.FileHandler('logs/app.log')
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
        ))
        app.logger.addHandler(file_handler)
        app.logger.setLevel(logging.INFO)
        app.logger.info('THM API startup - version 2.0.0')

def configure_hooks(app):
    """Configura hooks de request/response"""
    
    @app.before_request
    def before_request():
        """Executado antes de cada request"""
        g.start_time = time.time()
        
        # Log da requisi√ß√£o (apenas em debug)
        if app.debug:
            app.logger.debug(f"Request: {request.method} {request.path}")
    
    @app.after_request
    def after_request(response):
        """Executado ap√≥s cada request"""
        
        # Calcula tempo de resposta
        if hasattr(g, 'start_time'):
            response_time = time.time() - g.start_time
            response.headers['X-Response-Time'] = f"{response_time:.3f}s"
        
        # Headers de seguran√ßa
        response.headers['X-Content-Type-Options'] = 'nosniff'
        response.headers['X-Frame-Options'] = 'DENY'
        response.headers['X-XSS-Protection'] = '1; mode=block'
        
        return response

def configure_scheduler(app):
    """Configura scheduler para tarefas autom√°ticas"""
    
    def ingestao_automatica():
        """Fun√ß√£o para ingest√£o autom√°tica de previs√µes"""
        with app.app_context():
            app.logger.info('[üîÑ] Iniciando ingest√£o autom√°tica de previs√µes...')
            try:
                from api.services.openweather_service import OpenWeatherService
                resultado = OpenWeatherService.atualizar_previsoes_todas_cidades()
                app.logger.info(f'‚úÖ Ingest√£o autom√°tica conclu√≠da: {resultado}')
            except Exception as e:
                app.logger.error(f'‚ùå Erro na ingest√£o autom√°tica: {e}')
    
    # Configura scheduler
    scheduler = BackgroundScheduler()
    scheduler.add_job(ingestao_automatica, 'cron', hour=4, minute=0)
    scheduler.start()
    
    # Registra shutdown do scheduler
    atexit.register(lambda: scheduler.shutdown())
    
    app.logger.info("üìÖ Scheduler configurado - ingest√£o autom√°tica √†s 04:00")

# Fun√ß√µes utilit√°rias (mant√©m as existentes e melhora)

def get_db_connection():
    """Conecta ao banco PostgreSQL usando novo sistema de configura√ß√£o"""
    try:
        db_config = current_app.config['DB_CONFIG']
        current_app.logger.info(f"üîå Conectando ao PostgreSQL: {db_config['host']}:{db_config['port']}")
        current_app.logger.info(f"üìä Database: {db_config['database']}")
        current_app.logger.info(f"üë§ Usu√°rio: {db_config['user']}")
        
        conn = psycopg2.connect(**db_config)
        current_app.logger.info("‚úÖ Conex√£o PostgreSQL estabelecida!")
        return conn
    except psycopg2.OperationalError as e:
        current_app.logger.error(f"‚ùå Erro de conex√£o PostgreSQL: {e}")
        return None
    except Exception as e:
        current_app.logger.error(f"‚ùå Erro inesperado ao conectar: {e}")
        return None

def test_database():
    """Testa conex√£o e verifica tabelas"""
    conn = get_db_connection()
    if not conn:
        return False
    
    try:
        with conn.cursor(cursor_factory=RealDictCursor) as cursor:
            # Verificar vers√£o
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            current_app.logger.info(f"üêò PostgreSQL: {version['version'][:50]}...")
            
            # Listar tabelas
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public';
            """)
            tables = cursor.fetchall()
            table_names = [t['table_name'] for t in tables]
            current_app.logger.info(f"üìã Tabelas encontradas: {table_names}")
            
            # Contar registros em cada tabela
            for table in tables:
                table_name = table['table_name']
                try:
                    cursor.execute(f"SELECT COUNT(*) as count FROM {table_name};")
                    count = cursor.fetchone()['count']
                    current_app.logger.info(f"üìä {table_name}: {count} registros")
                except Exception as e:
                    current_app.logger.warning(f"‚ö†Ô∏è Erro ao contar {table_name}: {e}")
        
        conn.close()
        return True
        
    except Exception as e:
        current_app.logger.error(f"‚ùå Erro ao testar banco: {e}")
        conn.close()
        return False

def test_openweather_api():
    """Testa conectividade com a API OpenWeather"""
    try:
        api_key = current_app.config['OPENWEATHER_API_KEY']
        if not api_key:
            return False
        
        url = f"http://api.openweathermap.org/data/2.5/weather?q=Rio de Janeiro,BR&appid={api_key}"
        response = requests.get(url, timeout=current_app.config['REQUEST_TIMEOUT'])
        return response.status_code == 200
    except Exception:
        return False

def validate_configuration():
    """Valida configura√ß√µes essenciais"""
    try:
        required_configs = [
            'SECRET_KEY',
            'DB_CONFIG',
            'OPENWEATHER_API_KEY',
            'ESTADOS_SUPORTADOS'
        ]
        
        missing_configs = []
        for config_key in required_configs:
            if not current_app.config.get(config_key):
                missing_configs.append(config_key)
        
        if missing_configs:
            current_app.logger.error(f"Configura√ß√µes faltando: {missing_configs}")
            return False
        
        # Valida√ß√µes espec√≠ficas
        if len(current_app.config['ESTADOS_SUPORTADOS']) == 0:
            current_app.logger.error("Nenhum estado configurado")
            return False
        
        return True
        
    except Exception as e:
        current_app.logger.error(f"Erro ao validar configura√ß√µes: {e}")
        return False

# Decorador de cache
def cache_result(timeout=None):
    """
    Decorador para cache de resultados de fun√ß√µes
    
    Args:
        timeout: Tempo em segundos para expirar o cache
    """
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            if not current_app.config['ENABLE_CACHE']:
                return f(*args, **kwargs)
            
            # Cria chave do cache
            cache_key = f"{f.__name__}:{hash(str(args) + str(sorted(kwargs.items())))}"
            
            # Verifica se est√° no cache
            global app_cache
            if cache_key in app_cache:
                cached_data, cached_time = app_cache[cache_key]
                cache_timeout = timeout or current_app.config['CACHE_TTL']
                
                if time.time() - cached_time < cache_timeout:
                    current_app.logger.debug(f"Cache hit: {cache_key}")
                    return cached_data
            
            # Executa fun√ß√£o e armazena no cache
            result = f(*args, **kwargs)
            
            # Controla tamanho do cache
            if len(app_cache) >= current_app.config['CACHE_SIZE']:
                # Remove item mais antigo (FIFO simples)
                oldest_key = next(iter(app_cache))
                del app_cache[oldest_key]
            
            app_cache[cache_key] = (result, time.time())
            current_app.logger.debug(f"Cache miss: {cache_key}")
            
            return result
        return decorated_function
    return decorator

# Factory function principal
def create_application():
    """Fun√ß√£o de conveni√™ncia para criar a aplica√ß√£o"""
    return create_app()

# Para desenvolvimento local e compatibilidade
if __name__ == '__main__':
    # Cria aplica√ß√£o usando Application Factory
    app = create_app()
    
    # Cria diret√≥rios necess√°rios
    os.makedirs('logs', exist_ok=True)
    
    # Configura√ß√µes de startup
    port = app.config['PORT']
    debug = app.config['DEBUG']
    
    app.logger.info("üöÄ Iniciando API do Sistema de Previs√£o de Alagamentos...")
    app.logger.info(f"üåê Porta: {port}")
    app.logger.info(f"üîß Debug: {debug}")
    app.logger.info(f"üì¶ Vers√£o: 2.0.0")
    
    # Testar conex√µes na inicializa√ß√£o
    app.logger.info("üß™ Testando conex√µes...")
    
    # Testa banco
    with app.app_context():
        if test_database():
            app.logger.info("‚úÖ PostgreSQL funcionando!")
        else:
            app.logger.warning("‚ö†Ô∏è PostgreSQL com problemas - usando fallbacks")
        
        # Testa API do tempo
        if test_openweather_api():
            app.logger.info("‚úÖ OpenWeather API funcionando!")
        else:
            app.logger.warning("‚ö†Ô∏è OpenWeather API com problemas")
    
    app.logger.info(f"üöÄ Servidor iniciando na porta {port}...")
    
    # Inicia aplica√ß√£o
    app.run(
        debug=debug, 
        port=port, 
        host='0.0.0.0'
    )

# Alias para compatibilidade com deployment
application = create_application()
app = application